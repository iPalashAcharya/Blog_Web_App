<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>BLOG</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Play:wght@400;700&family=Roboto:ital,wght@0,300;0,400;0,700;1,400&family=Work+Sans:ital,wght@0,100..900;1,100..900&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link rel="stylesheet" href="/styles/style.css">
</head>

<body>
    <% if(locals.editingReply) { %>
        <script>
            window.editingReply = {
                reply_id: "<%= editingReply.reply_id %>",
                comment_id: "<%= editingReply.comment_id %>"
            };
        </script>
        <% } %>
    <div class="page-wrapper">
    <header>
        <div class="navbarContainer">
            <div class="navbarLogo"><embed class="logo" src="/images/Logo.svg"></div>
            <div class="hamburger" id="hamburger">&#9776;</div>
            <div class="navLinks" id="navLinks">
                <ul class="navLinkList work-sans">
                    <li><a href="/">Home</a></li>
                    <li><a href="/blogs">Blog</a></li>
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle">Profile <i class="fa-solid fa-circle-chevron-down"></i></a>
                        <ul class="dropdown-menu">
                            <%if(user){%>
                                <li><a href="/author/<%=user?.id%>">My Profile</a></li>
                                <li><a href="#" id="logout-link">Logout</a></li>
                            <%}else{%>
                                <li><a href="/login">Login</a></li>
                            <%}%>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </header>
    <main id="mainSection" class="content">
        <div class="blogContentContainer">
            <div class="blogContentTitle">
                <div class="tags">
                    <%for (const tag of post.tags.split(',').map(x=>x.trim())){%>
                        <div class="tag">
                            <p>
                                <%=tag%>
                            </p>
                        </div>
                        <%}%>
                </div>
                <h1><%=post.title%></h1>
                <div class="blogDetails">
                    <i class="far fa-user"></i>
                    <a href="/author/<%=post.author_id%>"><p class="work-sans authorName"><%=post.author_name%></p></a>
                    <p class="work-sans"><%=new Date(post.last_updated).toLocaleDateString("en-US",{year:'numeric',month:'long',day:'numeric'})%></p>
                    <i class="<%= user && user.blogLiked ? 'fa-solid' : 'fa-regular' %> fa-heart like blogLike" data-post-id="<%=post.blog_id%>"></i> <p><%=post.blog_likes_count%></p> 
                </div>
            </div>

            <div class="blogContent">
                <%-post.contentHtml%>
            </div>
            <%if(locals.editingComment){%>
            <form id="commentForm" method="post" action="/api/comment/modify/<%=editingComment.comment_id%>">
                <input type="hidden" id="comment_blog_id" name="blog_id" value="<%=post.blog_id%>">
                <textarea id="commentInput" name="commentText" required><%=editingComment.comment_text%></textarea>
                <button type="submit" name="commentCreateButton">Edit Comment</button>
            </form>
            <%}else{%>
            <form id="commentForm" method="post" action="/api/comment">
                <input type="hidden" id="comment_blog_id" name="blog_id" value="<%=post.blog_id%>">
                <textarea id="commentInput" name="commentText" placeholder="Write a comment..." required></textarea>
                <button type="submit" name="commentCreateButton">Post Comment</button>
            </form>
            <%}%>
            <h2 id="commentHeader">Responses(<% if (post.comments!==null) { %>
                    <%=post.comment_count%>
                        <% } else { %>0<% } %>)</h2>
            <div class="commentBoxContainer">
                <%if(post.comments!==null){%>
                <%for (const comment of post.comments){%>
                <div class="commentBox">
                    <div class="commentHeader">
                        <a href="/author/<%=comment.commented_by_id%>">
                        <img src="<%=comment.commented_by_profile%>" alt="User">
                        </a>
                        <a href="/author/<%=comment.commented_by_id%>">
                        <div class="userInfo">
                            <div class="CommentName"><%=comment.commented_by%></div>
                            <div class="commentDate"><%=new Date(comment.commented_on).toLocaleDateString("en-US",{year:'numeric',month:'long',day:'numeric'})%></div>
                        </div>
                        </a>
                        <%if(locals.user && user.id===comment.commented_by_id){%>
                        <div class="commentMenuWrapper">
                            <i class="fa-solid fa-ellipsis-vertical menuIcon" onclick="toggleMenu(this)"></i>
                            <div class="commentDropdown">
                                <a href="/comment/modify/<%=post.blog_id%>/<%=comment.comment_id%>"><div>Edit</div></a>
                                <a href="/comment/delete/<%=post.blog_id%>/<%=comment.comment_id%>" onclick="return confirmDelete()"><div>Delete</div></a>
                            </div>
                        </div>
                        <%}%>
                    </div>
                    <div class="commentContent">
                        <%=comment.comment_text%>
                    </div>
                    <div class="commentActions">
                        <span><i class="<%= locals.user && user.commentLiked && user.commentLiked.includes(comment.comment_id) ? 'fa-solid' : 'fa-regular' %> fa-heart like commentLike" data-comment-id="<%=comment.comment_id%>"></i> <span class="like_count"><%=comment.comment_likes%></span></span>
                        <span class="replyToggle" data-comment-id="<%=comment.comment_id%>"><i class="fa-regular fa-comment"></i> <span class="replies-count">
                            <%= comment.replies && comment.replies.length ? comment.replies.length : 0 %> replies
                        </span></span>
                        <%if(locals.user){%>
                        <span class="replyButton" data-comment-id="<%=comment.comment_id%>">Reply</span>
                        <%}%>
                    </div>
                    <%if(locals.user){%>
                    <div class="replyFormContainer" id="replyForm-<%=comment.comment_id%>" style="display:none">
                        <%if(locals.editingReply){%>
                        <form class="replyForm" method="post" action="/api/reply/modify/<%=editingReply.reply_id%>">
                            <input type="hidden" name="comment_id" value="<%=comment.comment_id%>">
                            <input type="hidden" name="blog_id" value="<%=post.blog_id%>">
                            <textarea class="replyInput" name="replyText" required><%=editingReply.reply_text%></textarea>
                            <div class="replyFormButtons">
                                <button type="button" class="cancelReply" data-comment-id="<%=comment.comment_id%>">Cancel</button>
                                <button type="submit" class="submitReply">Edit Reply</button>
                            </div>
                        </form>
                        <%}else{%>
                            <form class="replyForm" method="post" action="/api/reply">
                                <input type="hidden" name="comment_id" value="<%=comment.comment_id%>">
                                <input type="hidden" name="blog_id" value="<%=post.blog_id%>">
                                <input type="hidden" name="parent_reply_id" value="">
                                <div class="replying-to-indicator" style="display:none;"></div>
                                <textarea class="replyInput" name="reply_text" placeholder="Write a reply..." required></textarea>
                                <div class="replyFormButtons">
                                    <button type="button" class="cancelReply" data-comment-id="<%=comment.comment_id%>">Cancel</button>
                                    <button type="submit" class="submitReply">Reply</button>
                                </div>
                            </form>
                        <%}%>
                    </div>
                    <%}%>
                    <div class="repliesContainer" id="replies-<%=comment.comment_id%>" style="display: none;">
                    <% if(comment.replies && comment.replies.length> 0) { %>
                        <% for(const reply of comment.replies) { %>
                            <div class="replyBox <%= reply.parent_reply_id ? 'nested-reply' : '' %>" data-reply-id="<%= reply.reply_id %>" <%= reply.parent_reply_id ? `data-parent-reply-id="${reply.parent_reply_id}" ` : '' %>>
                                <% if(reply.parent_reply_id) { %>
                                    <div class="replyingTo">
                                        Replying to @<%= reply.replying_to %>
                                    </div>
                                <% } %>
                                <div class="replyHeader">
                                    <a href="/author/<%=reply.replied_by_id%>">
                                    <img src="<%=reply.replied_by_profile%>" alt="User" class="replyUserImg">
                                    </a>
                                    <a href="/author/<%=reply.replied_by_id%>">
                                    <div class="userInfo">
                                        <div class="replyName">
                                            <%=reply.replied_by%>
                                        </div>
                                        <div class="replyDate">
                                            <%=new
                                                Date(reply.replied_on).toLocaleDateString("en-US",{year:'numeric',month:'long',day:'numeric'})%>
                                        </div>
                                    </div>
                                    </a>
                                    <%if(locals.user && user.id===reply.replied_by_id){%>
                                    <div class="replyMenuWrapper">
                                        <i class="fa-solid fa-ellipsis-vertical menuIcon" onclick="toggleReplyMenu(this)"></i>
                                        <div class="replyDropdown">
                                            <a href="/reply/modify/<%=post.blog_id%>/<%=reply.reply_id%>">
                                                <div>Edit</div>
                                            </a>
                                            <a href="/reply/delete/<%=post.blog_id%>/<%=reply.reply_id%>"
                                                onclick="return confirmDelete()">
                                                <div>Delete</div>
                                            </a>
                                        </div>
                                    </div>
                                    <%}%>
                                </div>
                                <div class="replyContent">
                                    <%=reply.reply_text%>
                                </div>
                                <div class="replyActions">
                                    <span><i class="<%= locals.user&& user.replyLiked && user.replyLiked.includes(reply.reply_id) ? 'fa-solid' : 'fa-regular' %> fa-heart like replyLike"
                                            data-reply-id="<%=reply.reply_id%>"></i> <span class="reply_like_count">
                                            <%=reply.reply_likes%>
                                        </span></span>
                                    <%if(locals.user){%>
                                    <span class="replyToReplyButton" data-comment-id="<%=comment.comment_id%>" data-reply-id="<%=reply.reply_id%>"
                                        data-username="<%=reply.replied_by%>">Reply</span>
                                    <%}%>
                                </div>
                            </div>
                        <% } %>
                    <% } else { %>
                            <div class="noReplies">No replies yet.</div>
                        <% } %>
                    </div>
                </div>
                <%}%>
                <%}%>
            </div>
        </div>
    </main>

    <footer>
        <div class="footerContainer">
            <ul class="footerList">
                <li><i class="fa-regular fa-copyright"></i> 2025</li>
                <li><a href="#">LinkedIn</a></li>
                <li><a href="#">Instagram</a></li>
                <li><a href="#">GitHub</a></li>
                <li><a href="#">Email</a></li>
            </ul>
        </div>
    </footer>
</div>

    <script>
        document.getElementById('hamburger').addEventListener('click', () => {
            const nav = document.getElementById('navLinks');
            nav.classList.toggle('open');
        });
        document.getElementById('logout-link').addEventListener('click', async function (e) {
            e.preventDefault();

            const confirmLogout = confirm("Are you sure you want to logout?");
            if (!confirmLogout) return;

            try {
                const response = await fetch('/auth/logout', {
                    method: 'POST',
                    credentials: 'include'
                });

                if (response.ok) {
                    alert('Logged out successfully!');
                    window.location.href = '/'; 
                } else {
                    const error = await response.text();
                    alert('Logout failed: ' + error);
                }
            } catch (err) {
                console.error('Logout error:', err);
                alert('Something went wrong.');
            }
        });

        document.querySelectorAll('.replyToReplyButton').forEach(button => {
            button.addEventListener('click', function () {
                const commentId = this.getAttribute('data-comment-id');
                const replyId = this.getAttribute('data-reply-id');
                const username = this.getAttribute('data-username');

                const replyForm = document.getElementById(`replyForm-${commentId}`);
                if (!replyForm) return;
                replyForm.style.display = 'block';

                const parentReplyField = replyForm.querySelector('input[name="parent_reply_id"]');
                if(parentReplyField){
                    parentReplyField.value = replyId;
                }

                const indicator = replyForm.querySelector('.replying-to-indicator');
                if(indicator){
                    indicator.textContent = `Replying to ${username}`;
                    indicator.style.display = 'block';
                }
                const textarea = replyForm.querySelector('textarea');
                if(textarea){
                    textarea.focus();
                }

                const cancelButton = replyForm.querySelector('.cancelReply');
                if(cancelButton){
                    cancelButton.addEventListener('click', function () {
                        parentReplyField.value = '';
                        indicator.style.display = 'none';
                        indicator.textContent = '';
                    });
                }

                const repliesContainer = document.getElementById(`replies-${commentId}`);
                if (repliesContainer) {
                    repliesContainer.style.display = 'block';
                }
            });
        });

            document.addEventListener('DOMContentLoaded', function () {
                if (window.editingReply &&window.editingReply.comment_id) {
                    const commentId = window.editingReply.comment_id;
                    const replyForm = document.getElementById(`replyForm-${commentId}`);
                    if (replyForm) {
                        replyForm.style.display = 'block';

                        replyForm.scrollIntoView({ behavior: 'smooth', block: 'center' });

                        const textarea = replyForm.querySelector('textarea');
                        if (textarea) {
                            textarea.focus();
                        }
                    }
                }
            });

        document.querySelector('.blogLike').addEventListener('click', async function(){
                const post_id = this.getAttribute("data-post-id");
                const countPara = this.nextElementSibling;
                const icon = this;
                try{
                    const response = await fetch('/api/like',{
                        method:"POST",
                        headers:{
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ post_id: post_id })
                    }
                    );
                    const result = await response.json();
                    if(response.ok){
                        /*this.classList.toggle("fa-solid"); 
                        this.classList.toggle("fa-regular");*/
                        const isNowLiked = result.liked;
                        if (isNowLiked) {
                            icon.classList.add("fa-solid");
                            icon.classList.remove("fa-regular");
                        } else {
                            icon.classList.add("fa-regular");
                            icon.classList.remove("fa-solid");
                        }
                        const currentCount = parseInt(countPara.textContent.trim());
                        countPara.textContent = isNowLiked ? currentCount + 1 : currentCount - 1;
                    }else{
                        console.error("Error liking post:", result.error);
                    }
                }catch(error){
                    console.error("Network Error",error);
                }
            });
        document.querySelectorAll('.commentLike').forEach(like => {
                like.addEventListener('click', async function () {
                    const commentId = this.getAttribute('data-comment-id');
                    const countSpan = this.nextElementSibling;
                    const icon = this;
                    try {
                        const response = await fetch('/api/like', {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({ comment_id: commentId })
                        });
                        const result = await response.json();
                        if (response.ok) {
                            /*this.classList.toggle("fa-solid");
                            this.classList.toggle("fa-regular");*/
                            const isNowLiked = result.liked;
                            if (isNowLiked){
                                icon.classList.add("fa-solid");
                                icon.classList.remove("fa-regular");
                            }else{
                                icon.classList.add("fa-regular");
                                icon.classList.remove("fa-solid");
                            }
                            const currentCount = parseInt(countSpan.textContent);
                            countSpan.textContent = isNowLiked ? currentCount+1 : currentCount-1;
                        }else{
                            console.error('Error liking comment',result.error);
                        }
                    } catch (error) {
                        console.error("Network Error", error);
                    }
                });
            });
        
        document.querySelectorAll('.replyLike').forEach(like=>{
            like.addEventListener('click', async function(){
                const replyId = this.getAttribute('data-reply-id');
                const countSpan = this.nextElementSibling;
                const icon = this;
                try{
                    const response = await fetch('/api/like',{
                        method:"POST",
                        headers:{
                            "Content-Type" : "application/json"
                        },
                        body : JSON.stringify({reply_id:replyId})
                    });
                    const result = await response.json();
                    if (response.ok){
                        const isNowLiked = result.liked;
                        if (isNowLiked){
                            icon.classList.add("fa-solid");
                            icon.classList.remove("fa-regular");
                        }
                        else{
                            icon.classList.add("fa-regular");
                            icon.classList.remove("fa-solid");
                        }
                        const currentCount = parseInt(countSpan.textContent);
                        countSpan.textContent = isNowLiked ? currentCount+1 :currentCount-1;
                    }else{
                        console.error('Error Liking Reply',result.error);
                    }

                }catch(error){
                    console.error('Network Error',error);
                }
            })
        })


        function toggleMenu(icon) {
                document.querySelectorAll('.commentDropdown').forEach(menu => {
                    if (menu !== icon.nextElementSibling) {
                        menu.style.display = 'none';
                    }
                });

                const menu = icon.nextElementSibling;
                menu.style.display = (menu.style.display === 'block') ? 'none' : 'block';
            }
            document.addEventListener('click', function (event) {
                if (!event.target.closest('.commentMenuWrapper')) {
                    document.querySelectorAll('.commentDropdown').forEach(menu => {
                        menu.style.display = 'none';
                    });
                }
            });

            function confirmDelete() {
                return confirm(`Are you sure you want to delete the comment"?`);
            }

            document.querySelectorAll('.replyButton').forEach(button => {
                button.addEventListener('click', function () {
                    const commentId = this.getAttribute('data-comment-id');
                    const replyForm = document.getElementById(`replyForm-${commentId}`);
                    if(replyForm){
                        replyForm.style.display = 'block';
                        const textarea = replyForm.querySelector('textarea').focus();
                        if (textarea) {
                            textarea.focus();
                        }
                    }
                });
            });

                
            document.querySelectorAll('.cancelReply').forEach(button => {
                button.addEventListener('click', function () {
                    const commentId = this.getAttribute('data-comment-id');
                    const replyForm = document.getElementById(`replyForm-${commentId}`);
                    if(replyForm){
                        replyForm.style.display = 'none';
                        if(replyForm){
                            const textarea = replyForm.querySelector('textarea');
                            if(textarea){
                                textarea.value = '';
                            }
                        }
                    }
                });
            });

            document.querySelectorAll('.replyToggle').forEach(toggle => {
                toggle.addEventListener('click', function () {
                    const commentId = this.getAttribute('data-comment-id');
                    const repliesContainer = document.getElementById(`replies-${commentId}`);
                    if(repliesContainer){
                        if (repliesContainer.style.display === 'none' || repliesContainer.style.display === '') {
                            repliesContainer.style.display = 'block';
                        } else {
                            repliesContainer.style.display = 'none';
                        }
                    }
                });
            });

            function toggleReplyMenu(icon) {
                document.querySelectorAll('.replyDropdown').forEach(menu => {
                    if (menu !== icon.nextElementSibling) {
                        menu.style.display = 'none';
                    }
                });

                const menu = icon.nextElementSibling;
                menu.style.display = (menu.style.display === 'block') ? 'none' : 'block';
            }

            document.addEventListener('click', function (event) {
                    if (!event.target.closest('.replyMenuWrapper')) {
                        document.querySelectorAll('.replyDropdown').forEach(menu => {
                            menu.style.display = 'none';
                        });
                    }
            });
    </script>
</body>
</html>